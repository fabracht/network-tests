#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use crate::twamp::Twamp;
use ::common::error::CommonError;
use twamp::TwampConfiguration;
use validator::Validate;
mod common {
    use common::{
        message::{Message, PacketResults},
        time::{DateTime, NtpTimestamp},
    };
    use message_macro::BeBytes;
    pub const MIN_UNAUTH_PADDING: usize = 27;
    /// Unauthenticated TWAMP message as defined
    /// in [RFC4656 Section 4.1.2](https://www.rfc-editor.org/rfc/rfc4656#section-4.1.2)
    pub struct SenderMessage {
        /// Sender sequence number
        pub sequence_number: u32,
        /// Timestamp
        pub timestamp: NtpTimestamp,
        /// Error estimate on timestamp
        pub error_estimate: ErrorEstimate,
        /// Payload of the packet to send
        pub padding: Vec<u8>,
    }
    impl BeBytes for SenderMessage {
        fn try_from_be_bytes(
            bytes: &[u8],
        ) -> Result<(Self, usize), Box<dyn std::error::Error>> {
            let mut bit_sum = 0;
            let mut byte_index = 0;
            let mut end_byte_index = 0;
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n", "sequence_number",
                        byte_index, bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 4usize;
            bit_sum += 8 * 4usize;
            let sequence_number = <u32>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 4usize];
                arr.copy_from_slice(slice);
                arr
            });
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<NtpTimestamp>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "timestamp", byte_index,
                        bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (timestamp, bytes_written) = NtpTimestamp::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "timestamp",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<ErrorEstimate>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "error_estimate",
                        byte_index, bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (error_estimate, bytes_written) = ErrorEstimate::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "error_estimate",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "padding", byte_index,
                        bit_sum
                    ),
                );
            };
            let padding = Vec::from(&bytes[byte_index..]);
            Ok((
                Self {
                    sequence_number: sequence_number,
                    timestamp: timestamp,
                    error_estimate: error_estimate,
                    padding: padding,
                },
                bit_sum / 8,
            ))
        }
        fn to_be_bytes(&self) -> Vec<u8> {
            let mut bytes = Vec::new();
            {
                let sequence_number = self.sequence_number.to_owned();
                bytes.extend_from_slice(&sequence_number.to_be_bytes());
            }
            {
                let timestamp = self.timestamp.to_owned();
                bytes
                    .extend_from_slice(&message_macro::BeBytes::to_be_bytes(&timestamp));
            }
            {
                let error_estimate = self.error_estimate.to_owned();
                bytes
                    .extend_from_slice(
                        &message_macro::BeBytes::to_be_bytes(&error_estimate),
                    );
            }
            {
                let padding = self.padding.to_owned();
                bytes.extend_from_slice(&padding);
            }
            bytes
        }
        fn field_size(&self) -> usize {
            std::mem::size_of_val(self)
        }
    }
    impl SenderMessage {
        pub fn new(
            sequence_number: u32,
            timestamp: NtpTimestamp,
            error_estimate: ErrorEstimate,
            padding: Vec<u8>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            Ok(Self {
                sequence_number: sequence_number,
                timestamp: timestamp,
                error_estimate: error_estimate,
                padding: padding,
            })
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for SenderMessage {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "SenderMessage",
                "sequence_number",
                &self.sequence_number,
                "timestamp",
                &self.timestamp,
                "error_estimate",
                &self.error_estimate,
                "padding",
                &&self.padding,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SenderMessage {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SenderMessage {
        #[inline]
        fn eq(&self, other: &SenderMessage) -> bool {
            self.sequence_number == other.sequence_number
                && self.timestamp == other.timestamp
                && self.error_estimate == other.error_estimate
                && self.padding == other.padding
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for SenderMessage {}
    #[automatically_derived]
    impl ::core::cmp::Eq for SenderMessage {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u32>;
            let _: ::core::cmp::AssertParamIsEq<NtpTimestamp>;
            let _: ::core::cmp::AssertParamIsEq<ErrorEstimate>;
            let _: ::core::cmp::AssertParamIsEq<Vec<u8>>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for SenderMessage {
        #[inline]
        fn clone(&self) -> SenderMessage {
            SenderMessage {
                sequence_number: ::core::clone::Clone::clone(&self.sequence_number),
                timestamp: ::core::clone::Clone::clone(&self.timestamp),
                error_estimate: ::core::clone::Clone::clone(&self.error_estimate),
                padding: ::core::clone::Clone::clone(&self.padding),
            }
        }
    }
    impl Message for SenderMessage {
        fn packet_results(&self) -> PacketResults {
            PacketResults {
                sender_seq: self.sequence_number,
                reflector_seq: None,
                t1: DateTime::try_from(self.timestamp).unwrap(),
                t2: None,
                t3: None,
                t4: None,
            }
        }
    }
    /// Unauthenticated TWAMP message as defined
    /// in [RFC5357 Section 4.2.1](https://www.rfc-editor.org/rfc/rfc5357.html#section-4.2.1)
    #[repr(C)]
    pub struct ReflectedMessage {
        /// Reflector sequence number
        pub reflector_sequence_number: u32,
        /// Timestamp
        pub timestamp: NtpTimestamp,
        /// Error estimate on the timestamp
        pub error_estimate: ErrorEstimate,
        /// Must be zero
        pub mbz1: u16,
        /// Receive timestamp
        pub receive_timestamp: NtpTimestamp,
        /// Sender sequence number
        pub sender_sequence_number: u32,
        /// Timestamp
        pub sender_timestamp: NtpTimestamp,
        /// Error estimate on timestamp
        pub sender_error_estimate: ErrorEstimate,
        /// Must be zero
        pub mbz2: u16,
        /// Time to live (TTL) field of the sender's IP header
        pub sender_ttl: u8,
        /// Payload of the packet to send
        pub padding: Vec<u8>,
    }
    impl BeBytes for ReflectedMessage {
        fn try_from_be_bytes(
            bytes: &[u8],
        ) -> Result<(Self, usize), Box<dyn std::error::Error>> {
            let mut bit_sum = 0;
            let mut byte_index = 0;
            let mut end_byte_index = 0;
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n",
                        "reflector_sequence_number", byte_index, bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 4usize;
            bit_sum += 8 * 4usize;
            let reflector_sequence_number = <u32>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 4usize];
                arr.copy_from_slice(slice);
                arr
            });
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<NtpTimestamp>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "timestamp", byte_index,
                        bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (timestamp, bytes_written) = NtpTimestamp::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "timestamp",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<ErrorEstimate>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "error_estimate",
                        byte_index, bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (error_estimate, bytes_written) = ErrorEstimate::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "error_estimate",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n", "mbz1", byte_index,
                        bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 2usize;
            bit_sum += 8 * 2usize;
            let mbz1 = <u16>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 2usize];
                arr.copy_from_slice(slice);
                arr
            });
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<NtpTimestamp>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "receive_timestamp",
                        byte_index, bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (receive_timestamp, bytes_written) = NtpTimestamp::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "receive_timestamp",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n",
                        "sender_sequence_number", byte_index, bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 4usize;
            bit_sum += 8 * 4usize;
            let sender_sequence_number = <u32>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 4usize];
                arr.copy_from_slice(slice);
                arr
            });
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<NtpTimestamp>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "sender_timestamp",
                        byte_index, bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (sender_timestamp, bytes_written) = NtpTimestamp::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "sender_timestamp",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            let predicted_size = core::mem::size_of::<ErrorEstimate>();
            end_byte_index = byte_index + predicted_size;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "sender_error_estimate",
                        byte_index, bit_sum
                    ),
                );
            };
            bit_sum += (end_byte_index - byte_index) * 8;
            let (sender_error_estimate, bytes_written) = ErrorEstimate::try_from_be_bytes(
                &bytes[byte_index..end_byte_index],
            )?;
            {
                ::std::io::_print(
                    format_args!(
                        "----------  {0} bytes_written: {1}\n", "sender_error_estimate",
                        bytes_written
                    ),
                );
            };
            bit_sum -= (predicted_size - bytes_written) * 8;
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n", "mbz2", byte_index,
                        bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 2usize;
            bit_sum += 8 * 2usize;
            let mbz2 = <u16>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 2usize];
                arr.copy_from_slice(slice);
                arr
            });
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n", "sender_ttl",
                        byte_index, bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 1usize;
            bit_sum += 8 * 1usize;
            let sender_ttl = <u8>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 1usize];
                arr.copy_from_slice(slice);
                arr
            });
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "padding", byte_index,
                        bit_sum
                    ),
                );
            };
            let padding = Vec::from(&bytes[byte_index..]);
            Ok((
                Self {
                    reflector_sequence_number: reflector_sequence_number,
                    timestamp: timestamp,
                    error_estimate: error_estimate,
                    mbz1: mbz1,
                    receive_timestamp: receive_timestamp,
                    sender_sequence_number: sender_sequence_number,
                    sender_timestamp: sender_timestamp,
                    sender_error_estimate: sender_error_estimate,
                    mbz2: mbz2,
                    sender_ttl: sender_ttl,
                    padding: padding,
                },
                bit_sum / 8,
            ))
        }
        fn to_be_bytes(&self) -> Vec<u8> {
            let mut bytes = Vec::new();
            {
                let reflector_sequence_number = self
                    .reflector_sequence_number
                    .to_owned();
                bytes.extend_from_slice(&reflector_sequence_number.to_be_bytes());
            }
            {
                let timestamp = self.timestamp.to_owned();
                bytes
                    .extend_from_slice(&message_macro::BeBytes::to_be_bytes(&timestamp));
            }
            {
                let error_estimate = self.error_estimate.to_owned();
                bytes
                    .extend_from_slice(
                        &message_macro::BeBytes::to_be_bytes(&error_estimate),
                    );
            }
            {
                let mbz1 = self.mbz1.to_owned();
                bytes.extend_from_slice(&mbz1.to_be_bytes());
            }
            {
                let receive_timestamp = self.receive_timestamp.to_owned();
                bytes
                    .extend_from_slice(
                        &message_macro::BeBytes::to_be_bytes(&receive_timestamp),
                    );
            }
            {
                let sender_sequence_number = self.sender_sequence_number.to_owned();
                bytes.extend_from_slice(&sender_sequence_number.to_be_bytes());
            }
            {
                let sender_timestamp = self.sender_timestamp.to_owned();
                bytes
                    .extend_from_slice(
                        &message_macro::BeBytes::to_be_bytes(&sender_timestamp),
                    );
            }
            {
                let sender_error_estimate = self.sender_error_estimate.to_owned();
                bytes
                    .extend_from_slice(
                        &message_macro::BeBytes::to_be_bytes(&sender_error_estimate),
                    );
            }
            {
                let mbz2 = self.mbz2.to_owned();
                bytes.extend_from_slice(&mbz2.to_be_bytes());
            }
            {
                let sender_ttl = self.sender_ttl.to_owned();
                bytes.extend_from_slice(&sender_ttl.to_be_bytes());
            }
            {
                let padding = self.padding.to_owned();
                bytes.extend_from_slice(&padding);
            }
            bytes
        }
        fn field_size(&self) -> usize {
            std::mem::size_of_val(self)
        }
    }
    impl ReflectedMessage {
        pub fn new(
            reflector_sequence_number: u32,
            timestamp: NtpTimestamp,
            error_estimate: ErrorEstimate,
            mbz1: u16,
            receive_timestamp: NtpTimestamp,
            sender_sequence_number: u32,
            sender_timestamp: NtpTimestamp,
            sender_error_estimate: ErrorEstimate,
            mbz2: u16,
            sender_ttl: u8,
            padding: Vec<u8>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            Ok(Self {
                reflector_sequence_number: reflector_sequence_number,
                timestamp: timestamp,
                error_estimate: error_estimate,
                mbz1: mbz1,
                receive_timestamp: receive_timestamp,
                sender_sequence_number: sender_sequence_number,
                sender_timestamp: sender_timestamp,
                sender_error_estimate: sender_error_estimate,
                mbz2: mbz2,
                sender_ttl: sender_ttl,
                padding: padding,
            })
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ReflectedMessage {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "reflector_sequence_number",
                "timestamp",
                "error_estimate",
                "mbz1",
                "receive_timestamp",
                "sender_sequence_number",
                "sender_timestamp",
                "sender_error_estimate",
                "mbz2",
                "sender_ttl",
                "padding",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.reflector_sequence_number,
                &self.timestamp,
                &self.error_estimate,
                &self.mbz1,
                &self.receive_timestamp,
                &self.sender_sequence_number,
                &self.sender_timestamp,
                &self.sender_error_estimate,
                &self.mbz2,
                &self.sender_ttl,
                &&self.padding,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "ReflectedMessage",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ReflectedMessage {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ReflectedMessage {
        #[inline]
        fn eq(&self, other: &ReflectedMessage) -> bool {
            self.reflector_sequence_number == other.reflector_sequence_number
                && self.timestamp == other.timestamp
                && self.error_estimate == other.error_estimate && self.mbz1 == other.mbz1
                && self.receive_timestamp == other.receive_timestamp
                && self.sender_sequence_number == other.sender_sequence_number
                && self.sender_timestamp == other.sender_timestamp
                && self.sender_error_estimate == other.sender_error_estimate
                && self.mbz2 == other.mbz2 && self.sender_ttl == other.sender_ttl
                && self.padding == other.padding
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ReflectedMessage {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ReflectedMessage {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u32>;
            let _: ::core::cmp::AssertParamIsEq<NtpTimestamp>;
            let _: ::core::cmp::AssertParamIsEq<ErrorEstimate>;
            let _: ::core::cmp::AssertParamIsEq<u16>;
            let _: ::core::cmp::AssertParamIsEq<u8>;
            let _: ::core::cmp::AssertParamIsEq<Vec<u8>>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ReflectedMessage {
        #[inline]
        fn clone(&self) -> ReflectedMessage {
            ReflectedMessage {
                reflector_sequence_number: ::core::clone::Clone::clone(
                    &self.reflector_sequence_number,
                ),
                timestamp: ::core::clone::Clone::clone(&self.timestamp),
                error_estimate: ::core::clone::Clone::clone(&self.error_estimate),
                mbz1: ::core::clone::Clone::clone(&self.mbz1),
                receive_timestamp: ::core::clone::Clone::clone(&self.receive_timestamp),
                sender_sequence_number: ::core::clone::Clone::clone(
                    &self.sender_sequence_number,
                ),
                sender_timestamp: ::core::clone::Clone::clone(&self.sender_timestamp),
                sender_error_estimate: ::core::clone::Clone::clone(
                    &self.sender_error_estimate,
                ),
                mbz2: ::core::clone::Clone::clone(&self.mbz2),
                sender_ttl: ::core::clone::Clone::clone(&self.sender_ttl),
                padding: ::core::clone::Clone::clone(&self.padding),
            }
        }
    }
    impl Message for ReflectedMessage {
        fn packet_results(&self) -> PacketResults {
            PacketResults {
                sender_seq: self.sender_sequence_number,
                reflector_seq: Some(self.reflector_sequence_number),
                t1: DateTime::try_from(self.sender_timestamp).unwrap(),
                t2: DateTime::try_from(self.receive_timestamp).ok(),
                t3: DateTime::try_from(self.timestamp).ok(),
                t4: None,
            }
        }
    }
    /// Estimation on the error on a timestamp based
    /// on synchronization method used [RFC4656 Section 4.1.2](https://www.rfc-editor.org/rfc/rfc4656#section-4.1.2)
    pub struct ErrorEstimate {
        #[U8(size(1), pos(0))]
        pub s_bit: u8,
        #[U8(size(1), pos(1))]
        pub z_bit: u8,
        #[U8(size(6), pos(2))]
        pub scale: u8,
        pub multiplier: u8,
    }
    impl BeBytes for ErrorEstimate {
        fn try_from_be_bytes(
            bytes: &[u8],
        ) -> Result<(Self, usize), Box<dyn std::error::Error>> {
            let mut bit_sum = 0;
            let mut byte_index = 0;
            let mut end_byte_index = 0;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "s_bit", 0usize, bit_sum
                    ),
                );
            };
            bit_sum += 1usize;
            let s_bit = ((bytes[0usize] as u8) >> (7 - (1usize + 0usize - 1) as u8))
                & (1i32 as u8);
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "z_bit", 0usize, bit_sum
                    ),
                );
            };
            bit_sum += 1usize;
            let z_bit = ((bytes[0usize] as u8) >> (7 - (1usize + 1usize - 1) as u8))
                & (1i32 as u8);
            {
                ::std::io::_print(
                    format_args!(
                        "{0} byte_index: {1} bit_sum: {2}\n", "scale", 0usize, bit_sum
                    ),
                );
            };
            bit_sum += 6usize;
            let scale = ((bytes[0usize] as u8) >> (7 - (6usize + 2usize - 1) as u8))
                & (63i32 as u8);
            byte_index = bit_sum / 8;
            {
                ::std::io::_print(
                    format_args!(
                        "{0} pwn byte_index: {1} bit_sum: {2}\n", "multiplier",
                        byte_index, bit_sum
                    ),
                );
            };
            end_byte_index = byte_index + 1usize;
            bit_sum += 8 * 1usize;
            let multiplier = <u8>::from_be_bytes({
                let slice = &bytes[byte_index..end_byte_index];
                let mut arr = [0; 1usize];
                arr.copy_from_slice(slice);
                arr
            });
            Ok((
                Self {
                    s_bit: s_bit,
                    z_bit: z_bit,
                    scale: scale,
                    multiplier: multiplier,
                },
                bit_sum / 8,
            ))
        }
        fn to_be_bytes(&self) -> Vec<u8> {
            let mut bytes = Vec::new();
            {
                let s_bit = self.s_bit.to_owned();
                if (s_bit as u8) & !(1i32 as u8) != 0 {
                    ::core::panicking::panic_fmt(
                        format_args!(
                            "Value {0} for field {1} exceeds the maximum allowed value {2}.",
                            s_bit, "s_bit", 1i32
                        ),
                    );
                }
                if bytes.len() <= 0usize {
                    bytes.resize(0usize + 1, 0);
                }
                bytes[0usize] |= (s_bit as u8) << (7 - (1usize - 1) - 0usize);
            }
            {
                let z_bit = self.z_bit.to_owned();
                if (z_bit as u8) & !(1i32 as u8) != 0 {
                    ::core::panicking::panic_fmt(
                        format_args!(
                            "Value {0} for field {1} exceeds the maximum allowed value {2}.",
                            z_bit, "z_bit", 1i32
                        ),
                    );
                }
                if bytes.len() <= 0usize {
                    bytes.resize(0usize + 1, 0);
                }
                bytes[0usize] |= (z_bit as u8) << (7 - (1usize - 1) - 1usize);
            }
            {
                let scale = self.scale.to_owned();
                if (scale as u8) & !(63i32 as u8) != 0 {
                    ::core::panicking::panic_fmt(
                        format_args!(
                            "Value {0} for field {1} exceeds the maximum allowed value {2}.",
                            scale, "scale", 63i32
                        ),
                    );
                }
                if bytes.len() <= 0usize {
                    bytes.resize(0usize + 1, 0);
                }
                bytes[0usize] |= (scale as u8) << (7 - (6usize - 1) - 2usize);
            }
            {
                let multiplier = self.multiplier.to_owned();
                bytes.extend_from_slice(&multiplier.to_be_bytes());
            }
            bytes
        }
        fn field_size(&self) -> usize {
            std::mem::size_of_val(self)
        }
    }
    impl ErrorEstimate {
        pub fn new(
            s_bit: u8,
            z_bit: u8,
            scale: u8,
            multiplier: u8,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if s_bit > 1i32 as u8 {
                let err_msg = {
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Value of field {0} is out of range (max value: {1})",
                            "s_bit", 1i32
                        ),
                    );
                    res
                };
                let err = std::io::Error::new(std::io::ErrorKind::Other, err_msg);
                return Err(std::boxed::Box::new(err));
            }
            if z_bit > 1i32 as u8 {
                let err_msg = {
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Value of field {0} is out of range (max value: {1})",
                            "z_bit", 1i32
                        ),
                    );
                    res
                };
                let err = std::io::Error::new(std::io::ErrorKind::Other, err_msg);
                return Err(std::boxed::Box::new(err));
            }
            if scale > 63i32 as u8 {
                let err_msg = {
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "Value of field {0} is out of range (max value: {1})",
                            "scale", 63i32
                        ),
                    );
                    res
                };
                let err = std::io::Error::new(std::io::ErrorKind::Other, err_msg);
                return Err(std::boxed::Box::new(err));
            }
            Ok(Self {
                s_bit: s_bit,
                z_bit: z_bit,
                scale: scale,
                multiplier: multiplier,
            })
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ErrorEstimate {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "ErrorEstimate",
                "s_bit",
                &self.s_bit,
                "z_bit",
                &self.z_bit,
                "scale",
                &self.scale,
                "multiplier",
                &&self.multiplier,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ErrorEstimate {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ErrorEstimate {
        #[inline]
        fn eq(&self, other: &ErrorEstimate) -> bool {
            self.s_bit == other.s_bit && self.z_bit == other.z_bit
                && self.scale == other.scale && self.multiplier == other.multiplier
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ErrorEstimate {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ErrorEstimate {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u8>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ErrorEstimate {
        #[inline]
        fn clone(&self) -> ErrorEstimate {
            let _: ::core::clone::AssertParamIsClone<u8>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ErrorEstimate {}
}
mod twamp {
    use crate::{
        twamp_light_reflector::reflector::Reflector,
        twamp_light_reflector::Configuration as ReflectorConfiguration,
        twamp_light_sender::{result::TwampResult, twamp_light::TwampLight},
    };
    use common::{host::Host, Strategy};
    use core::time::Duration;
    use serde::{Deserialize, Serialize};
    use validator::Validate;
    pub struct TwampConfiguration {
        pub hosts: Option<Vec<Host>>,
        pub mode: String,
        pub source_ip_address: Option<String>,
        pub collection_period: Option<u64>,
        pub packet_interval: Option<u64>,
        pub padding: Option<usize>,
    }
    impl ::validator::Validate for TwampConfiguration {
        fn validate(&self) -> ::std::result::Result<(), ::validator::ValidationErrors> {
            use ::validator::ValidateArgs;
            self.validate_args(())
        }
    }
    #[allow(clippy::all)]
    #[allow(single_use_lifetimes)]
    impl<'v_a> ::validator::ValidateArgs<'v_a> for TwampConfiguration {
        type Args = ();
        #[allow(unused_mut)]
        #[allow(unused_variable)]
        fn validate_args(
            &self,
            args: Self::Args,
        ) -> ::std::result::Result<(), ::validator::ValidationErrors> {
            let mut errors = ::validator::ValidationErrors::new();
            let mut result = if errors.is_empty() {
                ::std::result::Result::Ok(())
            } else {
                ::std::result::Result::Err(errors)
            };
            result
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for TwampConfiguration {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "TwampConfiguration",
                    false as usize + 1 + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hosts",
                    &self.hosts,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "source_ip_address",
                    &self.source_ip_address,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "collection_period",
                    &self.collection_period,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "packet_interval",
                    &self.packet_interval,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "padding",
                    &self.padding,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for TwampConfiguration {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __field5,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            5u64 => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "hosts" => _serde::__private::Ok(__Field::__field0),
                            "mode" => _serde::__private::Ok(__Field::__field1),
                            "source_ip_address" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "collection_period" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "packet_interval" => _serde::__private::Ok(__Field::__field4),
                            "padding" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"hosts" => _serde::__private::Ok(__Field::__field0),
                            b"mode" => _serde::__private::Ok(__Field::__field1),
                            b"source_ip_address" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"collection_period" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"packet_interval" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            b"padding" => _serde::__private::Ok(__Field::__field5),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<TwampConfiguration>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = TwampConfiguration;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct TwampConfiguration",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            Option<Vec<Host>>,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct TwampConfiguration with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            String,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct TwampConfiguration with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            Option<String>,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct TwampConfiguration with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            Option<u64>,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct TwampConfiguration with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            Option<u64>,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct TwampConfiguration with 6 elements",
                                    ),
                                );
                            }
                        };
                        let __field5 = match match _serde::de::SeqAccess::next_element::<
                            Option<usize>,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        5usize,
                                        &"struct TwampConfiguration with 6 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(TwampConfiguration {
                            hosts: __field0,
                            mode: __field1,
                            source_ip_address: __field2,
                            collection_period: __field3,
                            packet_interval: __field4,
                            padding: __field5,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Option<Vec<Host>>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<Option<String>> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                        let mut __field5: _serde::__private::Option<Option<usize>> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("hosts"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Option<Vec<Host>>,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            String,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "source_ip_address",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Option<String>,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "collection_period",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Option<u64>,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "packet_interval",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Option<u64>,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field5 => {
                                    if _serde::__private::Option::is_some(&__field5) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "padding",
                                            ),
                                        );
                                    }
                                    __field5 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Option<usize>,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("hosts") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("mode") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "source_ip_address",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "collection_period",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "packet_interval",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field5 = match __field5 {
                            _serde::__private::Some(__field5) => __field5,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("padding") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(TwampConfiguration {
                            hosts: __field0,
                            mode: __field1,
                            source_ip_address: __field2,
                            collection_period: __field3,
                            packet_interval: __field4,
                            padding: __field5,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &[
                    "hosts",
                    "mode",
                    "source_ip_address",
                    "collection_period",
                    "packet_interval",
                    "padding",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "TwampConfiguration",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<TwampConfiguration>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::fmt::Debug for TwampConfiguration {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "hosts",
                "mode",
                "source_ip_address",
                "collection_period",
                "packet_interval",
                "padding",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.hosts,
                &self.mode,
                &self.source_ip_address,
                &self.collection_period,
                &self.packet_interval,
                &&self.padding,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "TwampConfiguration",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for TwampConfiguration {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for TwampConfiguration {
        #[inline]
        fn eq(&self, other: &TwampConfiguration) -> bool {
            self.hosts == other.hosts && self.mode == other.mode
                && self.source_ip_address == other.source_ip_address
                && self.collection_period == other.collection_period
                && self.packet_interval == other.packet_interval
                && self.padding == other.padding
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for TwampConfiguration {
        #[inline]
        fn clone(&self) -> TwampConfiguration {
            TwampConfiguration {
                hosts: ::core::clone::Clone::clone(&self.hosts),
                mode: ::core::clone::Clone::clone(&self.mode),
                source_ip_address: ::core::clone::Clone::clone(&self.source_ip_address),
                collection_period: ::core::clone::Clone::clone(&self.collection_period),
                packet_interval: ::core::clone::Clone::clone(&self.packet_interval),
                padding: ::core::clone::Clone::clone(&self.padding),
            }
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for TwampConfiguration {
        #[inline]
        fn default() -> TwampConfiguration {
            TwampConfiguration {
                hosts: ::core::default::Default::default(),
                mode: ::core::default::Default::default(),
                source_ip_address: ::core::default::Default::default(),
                collection_period: ::core::default::Default::default(),
                packet_interval: ::core::default::Default::default(),
                padding: ::core::default::Default::default(),
            }
        }
    }
    pub struct Twamp {
        configuration: TwampConfiguration,
    }
    impl Twamp {
        pub fn new(configuration: TwampConfiguration) -> Self {
            Self { configuration }
        }
        pub fn generate(
            &self,
        ) -> Result<
            Box<dyn Strategy<TwampResult, crate::CommonError>>,
            crate::CommonError,
        > {
            let hosts = self
                .configuration
                .hosts
                .iter()
                .flat_map(|host| host.clone())
                .collect::<Vec<Host>>();
            match self.configuration.mode.as_str() {
                "LIGHT_SENDER" => {
                    Ok(
                        Box::new(
                            TwampLight::new(
                                &self
                                    .configuration
                                    .source_ip_address
                                    .clone()
                                    .unwrap_or_default(),
                                Duration::from_secs(
                                    self.configuration.collection_period.unwrap_or_default(),
                                ),
                                &hosts,
                                Duration::from_millis(
                                    self
                                        .configuration
                                        .packet_interval
                                        .unwrap_or_default()
                                        .into(),
                                ),
                                self.configuration.padding.unwrap_or_default(),
                            ),
                        ),
                    )
                }
                "LIGHT_REFLECTOR" => {
                    Ok(
                        Box::new(
                            Reflector::new(ReflectorConfiguration {
                                mode: self.configuration.mode.clone(),
                                source_ip_address: self
                                    .configuration
                                    .clone()
                                    .source_ip_address
                                    .unwrap_or_default()
                                    .clone(),
                            }),
                        ),
                    )
                }
                _ => ::core::panicking::panic_fmt(format_args!("No such mode")),
            }
        }
    }
}
mod twamp_light_reflector {
    use serde::{Deserialize, Serialize};
    use validator::Validate;
    pub mod reflector {
        #[cfg(target_os = "linux")]
        use common::epoll_loop::LinuxEventLoop as EventLoop;
        use message_macro::BeBytes;
        use std::{os::fd::IntoRawFd, sync::atomic::Ordering};
        use ::common::{
            error::CommonError, session::Session, socket::{CustomUdpSocket, Socket},
            Strategy, TestResult,
        };
        use common::{
            event_loop::EventLoopTrait, socket::set_timestamping_options,
            time::{DateTime, NtpTimestamp},
        };
        use crate::{
            common::{ErrorEstimate, ReflectedMessage, SenderMessage},
            twamp_light_sender::result::TwampResult,
        };
        use super::Configuration;
        pub struct Reflector {
            configuration: Configuration,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Reflector {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(
                    f,
                    "Reflector",
                    "configuration",
                    &&self.configuration,
                )
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Reflector {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Reflector {
            #[inline]
            fn eq(&self, other: &Reflector) -> bool {
                self.configuration == other.configuration
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Reflector {
            #[inline]
            fn clone(&self) -> Reflector {
                Reflector {
                    configuration: ::core::clone::Clone::clone(&self.configuration),
                }
            }
        }
        #[automatically_derived]
        impl ::core::default::Default for Reflector {
            #[inline]
            fn default() -> Reflector {
                Reflector {
                    configuration: ::core::default::Default::default(),
                }
            }
        }
        impl Reflector {
            pub fn new(configuration: Configuration) -> Self {
                Self { configuration }
            }
            fn create_socket(&mut self) -> Result<CustomUdpSocket, CommonError> {
                let socket = mio::net::UdpSocket::bind(
                        self.configuration.source_ip_address.parse().unwrap(),
                    )
                    .unwrap();
                let mut my_socket = CustomUdpSocket::new(socket.into_raw_fd());
                #[cfg(target_os = "linux")]
                my_socket
                    .set_socket_options(libc::SOCK_NONBLOCK | libc::SOCK_CLOEXEC, None)?;
                set_timestamping_options(&mut my_socket)?;
                Ok(my_socket)
            }
        }
        impl Strategy<TwampResult, CommonError> for Reflector {
            fn execute(&mut self) -> std::result::Result<TwampResult, CommonError> {
                let my_socket = self.create_socket()?;
                let mut sessions: Vec<Session> = Vec::new();
                let mut event_loop = EventLoop::new(1024);
                let _rx_token = event_loop
                    .register_event_source(
                        my_socket,
                        move |inner_socket| {
                            let buffer = &mut [0; 1 << 16];
                            let (result, socket_address, timestamp) = inner_socket
                                .receive_from(buffer)?;
                            let (
                                twamp_test_message,
                                _bytes_written,
                            ): (SenderMessage, usize) = SenderMessage::try_from_be_bytes(
                                &buffer[..result],
                            )?;
                            let session_option = sessions
                                .iter()
                                .find(|session| session.socket_address == socket_address);
                            let reflected_padding = twamp_test_message.field_size()
                                - core::mem::size_of::<Vec<u8>>();
                            {
                                let lvl = ::log::Level::Info;
                                if lvl <= ::log::STATIC_MAX_LEVEL
                                    && lvl <= ::log::max_level()
                                {
                                    ::log::__private_api_log(
                                        format_args!(
                                            "Received result of size: {0}, message of size: {1} and padding: {2}",
                                            result, reflected_padding, twamp_test_message.padding.len()
                                        ),
                                        lvl,
                                        &(
                                            "twamp::twamp_light_reflector::reflector",
                                            "twamp::twamp_light_reflector::reflector",
                                            "twamp/src/twamp_light_reflector/reflector.rs",
                                            82u32,
                                        ),
                                        ::log::__private_api::Option::None,
                                    );
                                }
                            };
                            if let Some(session) = session_option {
                                let socket_address = session.socket_address;
                                let reflected_message = ReflectedMessage {
                                    reflector_sequence_number: session
                                        .seq_number
                                        .load(Ordering::SeqCst),
                                    timestamp: NtpTimestamp::from(DateTime::utc_now()),
                                    error_estimate: ErrorEstimate::new(0, 0, 0, 1)?,
                                    mbz1: 0,
                                    receive_timestamp: NtpTimestamp::from(timestamp),
                                    sender_sequence_number: twamp_test_message.sequence_number,
                                    sender_timestamp: twamp_test_message.timestamp,
                                    sender_error_estimate: twamp_test_message.error_estimate,
                                    mbz2: 0,
                                    sender_ttl: 255,
                                    padding: ::alloc::vec::from_elem(0_u8, 0),
                                };
                                inner_socket
                                    .send_to(&socket_address, reflected_message.clone())?;
                                session.add_to_sent(Box::new(reflected_message));
                            } else {
                                let session = Session::from_socket_address(&socket_address);
                                let reflected_message = ReflectedMessage {
                                    reflector_sequence_number: session
                                        .seq_number
                                        .load(Ordering::SeqCst),
                                    timestamp: NtpTimestamp::from(DateTime::utc_now()),
                                    error_estimate: ErrorEstimate::new(0, 0, 0, 1)?,
                                    mbz1: 0,
                                    receive_timestamp: NtpTimestamp::from(timestamp),
                                    sender_sequence_number: twamp_test_message.sequence_number,
                                    sender_timestamp: twamp_test_message.timestamp,
                                    sender_error_estimate: twamp_test_message.error_estimate,
                                    mbz2: 0,
                                    sender_ttl: 255,
                                    padding: Vec::new(),
                                };
                                {
                                    let lvl = ::log::Level::Debug;
                                    if lvl <= ::log::STATIC_MAX_LEVEL
                                        && lvl <= ::log::max_level()
                                    {
                                        ::log::__private_api_log(
                                            format_args!(
                                                "Refected message: \n {0:?}", reflected_message
                                            ),
                                            lvl,
                                            &(
                                                "twamp::twamp_light_reflector::reflector",
                                                "twamp::twamp_light_reflector::reflector",
                                                "twamp/src/twamp_light_reflector/reflector.rs",
                                                122u32,
                                            ),
                                            ::log::__private_api::Option::None,
                                        );
                                    }
                                };
                                inner_socket
                                    .send_to(&socket_address, reflected_message.clone())?;
                                session.add_to_sent(Box::new(reflected_message));
                                sessions.push(session);
                            }
                            Ok(result as i32)
                        },
                    )?;
                event_loop.run()?;
                Ok(TwampResult {
                    session_results: Vec::new(),
                    error: None,
                })
            }
        }
        pub struct SessionResult {}
        impl TestResult for SessionResult {}
    }
    pub struct Configuration {
        #[validate(contains = "LIGHT")]
        pub mode: String,
        pub source_ip_address: String,
    }
    impl ::validator::Validate for Configuration {
        fn validate(&self) -> ::std::result::Result<(), ::validator::ValidationErrors> {
            use ::validator::ValidateArgs;
            self.validate_args(())
        }
    }
    #[allow(clippy::all)]
    #[allow(single_use_lifetimes)]
    impl<'v_a> ::validator::ValidateArgs<'v_a> for Configuration {
        type Args = ();
        #[allow(unused_mut)]
        #[allow(unused_variable)]
        fn validate_args(
            &self,
            args: Self::Args,
        ) -> ::std::result::Result<(), ::validator::ValidationErrors> {
            let mut errors = ::validator::ValidationErrors::new();
            if !::validator::validate_contains(&self.mode, &"LIGHT") {
                let mut err = ::validator::ValidationError::new("contains");
                err.add_param(::std::borrow::Cow::from("value"), &&self.mode);
                err.add_param(::std::borrow::Cow::from("needle"), &"LIGHT");
                errors.add("mode", err);
            }
            let mut result = if errors.is_empty() {
                ::std::result::Result::Ok(())
            } else {
                ::std::result::Result::Err(errors)
            };
            result
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Configuration {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Configuration",
                    false as usize + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "source_ip_address",
                    &self.source_ip_address,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Configuration {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "mode" => _serde::__private::Ok(__Field::__field0),
                            "source_ip_address" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"mode" => _serde::__private::Ok(__Field::__field0),
                            b"source_ip_address" => {
                                _serde::__private::Ok(__Field::__field1)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Configuration>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Configuration;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Configuration",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            String,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Configuration with 2 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            String,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Configuration with 2 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Configuration {
                            mode: __field0,
                            source_ip_address: __field1,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            String,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "source_ip_address",
                                            ),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            String,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("mode") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "source_ip_address",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Configuration {
                            mode: __field0,
                            source_ip_address: __field1,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &["mode", "source_ip_address"];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Configuration",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Configuration>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::fmt::Debug for Configuration {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "Configuration",
                "mode",
                &self.mode,
                "source_ip_address",
                &&self.source_ip_address,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Configuration {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Configuration {
        #[inline]
        fn eq(&self, other: &Configuration) -> bool {
            self.mode == other.mode && self.source_ip_address == other.source_ip_address
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Configuration {
        #[inline]
        fn clone(&self) -> Configuration {
            Configuration {
                mode: ::core::clone::Clone::clone(&self.mode),
                source_ip_address: ::core::clone::Clone::clone(&self.source_ip_address),
            }
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Configuration {
        #[inline]
        fn default() -> Configuration {
            Configuration {
                mode: ::core::default::Default::default(),
                source_ip_address: ::core::default::Default::default(),
            }
        }
    }
}
mod twamp_light_sender {
    use common::host::Host;
    use serde::{Deserialize, Serialize};
    use validator::Validate;
    pub mod result {
        use std::net::SocketAddr;
        use common::TestResult;
        use serde::{Deserialize, Serialize};
        use super::NETWORK_PRECISION;
        pub struct NetworkStatistics {
            #[serde(serialize_with = "round_f64_with_precision")]
            pub avg_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub min_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub max_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub std_dev_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub median_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub low_percentile_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub high_percentile_rtt: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub avg_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub min_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub max_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub std_dev_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub median_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub low_percentile_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub high_percentile_forward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub avg_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub min_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub max_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub std_dev_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub median_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub low_percentile_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub high_percentile_backward_owd: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub avg_process_time: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub min_process_time: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub max_process_time: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub std_dev_process_time: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub median_process_time: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub low_percentile_process_time: f64,
            #[serde(serialize_with = "round_f64_with_precision")]
            pub high_percentile_process_time: f64,
            pub forward_loss: u32,
            pub backward_loss: u32,
            pub total_loss: u32,
            pub total_packets: usize,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for NetworkStatistics {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "avg_rtt",
                    "min_rtt",
                    "max_rtt",
                    "std_dev_rtt",
                    "median_rtt",
                    "low_percentile_rtt",
                    "high_percentile_rtt",
                    "avg_forward_owd",
                    "min_forward_owd",
                    "max_forward_owd",
                    "std_dev_forward_owd",
                    "median_forward_owd",
                    "low_percentile_forward_owd",
                    "high_percentile_forward_owd",
                    "avg_backward_owd",
                    "min_backward_owd",
                    "max_backward_owd",
                    "std_dev_backward_owd",
                    "median_backward_owd",
                    "low_percentile_backward_owd",
                    "high_percentile_backward_owd",
                    "avg_process_time",
                    "min_process_time",
                    "max_process_time",
                    "std_dev_process_time",
                    "median_process_time",
                    "low_percentile_process_time",
                    "high_percentile_process_time",
                    "forward_loss",
                    "backward_loss",
                    "total_loss",
                    "total_packets",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.avg_rtt,
                    &self.min_rtt,
                    &self.max_rtt,
                    &self.std_dev_rtt,
                    &self.median_rtt,
                    &self.low_percentile_rtt,
                    &self.high_percentile_rtt,
                    &self.avg_forward_owd,
                    &self.min_forward_owd,
                    &self.max_forward_owd,
                    &self.std_dev_forward_owd,
                    &self.median_forward_owd,
                    &self.low_percentile_forward_owd,
                    &self.high_percentile_forward_owd,
                    &self.avg_backward_owd,
                    &self.min_backward_owd,
                    &self.max_backward_owd,
                    &self.std_dev_backward_owd,
                    &self.median_backward_owd,
                    &self.low_percentile_backward_owd,
                    &self.high_percentile_backward_owd,
                    &self.avg_process_time,
                    &self.min_process_time,
                    &self.max_process_time,
                    &self.std_dev_process_time,
                    &self.median_process_time,
                    &self.low_percentile_process_time,
                    &self.high_percentile_process_time,
                    &self.forward_loss,
                    &self.backward_loss,
                    &self.total_loss,
                    &&self.total_packets,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "NetworkStatistics",
                    names,
                    values,
                )
            }
        }
        #[automatically_derived]
        impl ::core::default::Default for NetworkStatistics {
            #[inline]
            fn default() -> NetworkStatistics {
                NetworkStatistics {
                    avg_rtt: ::core::default::Default::default(),
                    min_rtt: ::core::default::Default::default(),
                    max_rtt: ::core::default::Default::default(),
                    std_dev_rtt: ::core::default::Default::default(),
                    median_rtt: ::core::default::Default::default(),
                    low_percentile_rtt: ::core::default::Default::default(),
                    high_percentile_rtt: ::core::default::Default::default(),
                    avg_forward_owd: ::core::default::Default::default(),
                    min_forward_owd: ::core::default::Default::default(),
                    max_forward_owd: ::core::default::Default::default(),
                    std_dev_forward_owd: ::core::default::Default::default(),
                    median_forward_owd: ::core::default::Default::default(),
                    low_percentile_forward_owd: ::core::default::Default::default(),
                    high_percentile_forward_owd: ::core::default::Default::default(),
                    avg_backward_owd: ::core::default::Default::default(),
                    min_backward_owd: ::core::default::Default::default(),
                    max_backward_owd: ::core::default::Default::default(),
                    std_dev_backward_owd: ::core::default::Default::default(),
                    median_backward_owd: ::core::default::Default::default(),
                    low_percentile_backward_owd: ::core::default::Default::default(),
                    high_percentile_backward_owd: ::core::default::Default::default(),
                    avg_process_time: ::core::default::Default::default(),
                    min_process_time: ::core::default::Default::default(),
                    max_process_time: ::core::default::Default::default(),
                    std_dev_process_time: ::core::default::Default::default(),
                    median_process_time: ::core::default::Default::default(),
                    low_percentile_process_time: ::core::default::Default::default(),
                    high_percentile_process_time: ::core::default::Default::default(),
                    forward_loss: ::core::default::Default::default(),
                    backward_loss: ::core::default::Default::default(),
                    total_loss: ::core::default::Default::default(),
                    total_packets: ::core::default::Default::default(),
                }
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for NetworkStatistics {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = match _serde::Serializer::serialize_struct(
                        __serializer,
                        "NetworkStatistics",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                            + 1 + 1 + 1 + 1 + 1,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "avg_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.avg_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "min_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.min_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "max_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.max_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "std_dev_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.std_dev_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "median_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.median_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "low_percentile_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.low_percentile_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "high_percentile_rtt",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.high_percentile_rtt,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "avg_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.avg_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "min_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.min_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "max_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.max_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "std_dev_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.std_dev_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "median_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.median_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "low_percentile_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.low_percentile_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "high_percentile_forward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.high_percentile_forward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "avg_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.avg_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "min_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.min_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "max_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.max_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "std_dev_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.std_dev_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "median_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.median_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "low_percentile_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.low_percentile_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "high_percentile_backward_owd",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.high_percentile_backward_owd,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "avg_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.avg_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "min_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.min_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "max_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.max_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "std_dev_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.std_dev_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "median_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.median_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "low_percentile_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.low_percentile_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "high_percentile_process_time",
                        {
                            struct __SerializeWith<'__a> {
                                values: (&'__a f64,),
                                phantom: _serde::__private::PhantomData<NetworkStatistics>,
                            }
                            impl<'__a> _serde::Serialize for __SerializeWith<'__a> {
                                fn serialize<__S>(
                                    &self,
                                    __s: __S,
                                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                                where
                                    __S: _serde::Serializer,
                                {
                                    round_f64_with_precision(self.values.0, __s)
                                }
                            }
                            &__SerializeWith {
                                values: (&self.high_percentile_process_time,),
                                phantom: _serde::__private::PhantomData::<NetworkStatistics>,
                            }
                        },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "forward_loss",
                        &self.forward_loss,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "backward_loss",
                        &self.backward_loss,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_loss",
                        &self.total_loss,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_packets",
                        &self.total_packets,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for NetworkStatistics {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __field15,
                        __field16,
                        __field17,
                        __field18,
                        __field19,
                        __field20,
                        __field21,
                        __field22,
                        __field23,
                        __field24,
                        __field25,
                        __field26,
                        __field27,
                        __field28,
                        __field29,
                        __field30,
                        __field31,
                        __ignore,
                    }
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                12u64 => _serde::__private::Ok(__Field::__field12),
                                13u64 => _serde::__private::Ok(__Field::__field13),
                                14u64 => _serde::__private::Ok(__Field::__field14),
                                15u64 => _serde::__private::Ok(__Field::__field15),
                                16u64 => _serde::__private::Ok(__Field::__field16),
                                17u64 => _serde::__private::Ok(__Field::__field17),
                                18u64 => _serde::__private::Ok(__Field::__field18),
                                19u64 => _serde::__private::Ok(__Field::__field19),
                                20u64 => _serde::__private::Ok(__Field::__field20),
                                21u64 => _serde::__private::Ok(__Field::__field21),
                                22u64 => _serde::__private::Ok(__Field::__field22),
                                23u64 => _serde::__private::Ok(__Field::__field23),
                                24u64 => _serde::__private::Ok(__Field::__field24),
                                25u64 => _serde::__private::Ok(__Field::__field25),
                                26u64 => _serde::__private::Ok(__Field::__field26),
                                27u64 => _serde::__private::Ok(__Field::__field27),
                                28u64 => _serde::__private::Ok(__Field::__field28),
                                29u64 => _serde::__private::Ok(__Field::__field29),
                                30u64 => _serde::__private::Ok(__Field::__field30),
                                31u64 => _serde::__private::Ok(__Field::__field31),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "avg_rtt" => _serde::__private::Ok(__Field::__field0),
                                "min_rtt" => _serde::__private::Ok(__Field::__field1),
                                "max_rtt" => _serde::__private::Ok(__Field::__field2),
                                "std_dev_rtt" => _serde::__private::Ok(__Field::__field3),
                                "median_rtt" => _serde::__private::Ok(__Field::__field4),
                                "low_percentile_rtt" => {
                                    _serde::__private::Ok(__Field::__field5)
                                }
                                "high_percentile_rtt" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                "avg_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                "min_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field8)
                                }
                                "max_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field9)
                                }
                                "std_dev_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field10)
                                }
                                "median_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field11)
                                }
                                "low_percentile_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field12)
                                }
                                "high_percentile_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field13)
                                }
                                "avg_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field14)
                                }
                                "min_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field15)
                                }
                                "max_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field16)
                                }
                                "std_dev_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                "median_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field18)
                                }
                                "low_percentile_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field19)
                                }
                                "high_percentile_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field20)
                                }
                                "avg_process_time" => {
                                    _serde::__private::Ok(__Field::__field21)
                                }
                                "min_process_time" => {
                                    _serde::__private::Ok(__Field::__field22)
                                }
                                "max_process_time" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                "std_dev_process_time" => {
                                    _serde::__private::Ok(__Field::__field24)
                                }
                                "median_process_time" => {
                                    _serde::__private::Ok(__Field::__field25)
                                }
                                "low_percentile_process_time" => {
                                    _serde::__private::Ok(__Field::__field26)
                                }
                                "high_percentile_process_time" => {
                                    _serde::__private::Ok(__Field::__field27)
                                }
                                "forward_loss" => _serde::__private::Ok(__Field::__field28),
                                "backward_loss" => _serde::__private::Ok(__Field::__field29),
                                "total_loss" => _serde::__private::Ok(__Field::__field30),
                                "total_packets" => _serde::__private::Ok(__Field::__field31),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"avg_rtt" => _serde::__private::Ok(__Field::__field0),
                                b"min_rtt" => _serde::__private::Ok(__Field::__field1),
                                b"max_rtt" => _serde::__private::Ok(__Field::__field2),
                                b"std_dev_rtt" => _serde::__private::Ok(__Field::__field3),
                                b"median_rtt" => _serde::__private::Ok(__Field::__field4),
                                b"low_percentile_rtt" => {
                                    _serde::__private::Ok(__Field::__field5)
                                }
                                b"high_percentile_rtt" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                b"avg_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                b"min_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field8)
                                }
                                b"max_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field9)
                                }
                                b"std_dev_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field10)
                                }
                                b"median_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field11)
                                }
                                b"low_percentile_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field12)
                                }
                                b"high_percentile_forward_owd" => {
                                    _serde::__private::Ok(__Field::__field13)
                                }
                                b"avg_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field14)
                                }
                                b"min_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field15)
                                }
                                b"max_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field16)
                                }
                                b"std_dev_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                b"median_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field18)
                                }
                                b"low_percentile_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field19)
                                }
                                b"high_percentile_backward_owd" => {
                                    _serde::__private::Ok(__Field::__field20)
                                }
                                b"avg_process_time" => {
                                    _serde::__private::Ok(__Field::__field21)
                                }
                                b"min_process_time" => {
                                    _serde::__private::Ok(__Field::__field22)
                                }
                                b"max_process_time" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                b"std_dev_process_time" => {
                                    _serde::__private::Ok(__Field::__field24)
                                }
                                b"median_process_time" => {
                                    _serde::__private::Ok(__Field::__field25)
                                }
                                b"low_percentile_process_time" => {
                                    _serde::__private::Ok(__Field::__field26)
                                }
                                b"high_percentile_process_time" => {
                                    _serde::__private::Ok(__Field::__field27)
                                }
                                b"forward_loss" => _serde::__private::Ok(__Field::__field28),
                                b"backward_loss" => {
                                    _serde::__private::Ok(__Field::__field29)
                                }
                                b"total_loss" => _serde::__private::Ok(__Field::__field30),
                                b"total_packets" => {
                                    _serde::__private::Ok(__Field::__field31)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<NetworkStatistics>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = NetworkStatistics;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct NetworkStatistics",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field12 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            12usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field13 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            13usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field14 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            14usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field15 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            15usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field16 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            16usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field17 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            17usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field18 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            18usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field19 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            19usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field20 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            20usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field21 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            21usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field22 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            22usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field23 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            23usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field24 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            24usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field25 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            25usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field26 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            26usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field27 = match match _serde::de::SeqAccess::next_element::<
                                f64,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            27usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field28 = match match _serde::de::SeqAccess::next_element::<
                                u32,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            28usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field29 = match match _serde::de::SeqAccess::next_element::<
                                u32,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            29usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field30 = match match _serde::de::SeqAccess::next_element::<
                                u32,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            30usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            let __field31 = match match _serde::de::SeqAccess::next_element::<
                                usize,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            31usize,
                                            &"struct NetworkStatistics with 32 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(NetworkStatistics {
                                avg_rtt: __field0,
                                min_rtt: __field1,
                                max_rtt: __field2,
                                std_dev_rtt: __field3,
                                median_rtt: __field4,
                                low_percentile_rtt: __field5,
                                high_percentile_rtt: __field6,
                                avg_forward_owd: __field7,
                                min_forward_owd: __field8,
                                max_forward_owd: __field9,
                                std_dev_forward_owd: __field10,
                                median_forward_owd: __field11,
                                low_percentile_forward_owd: __field12,
                                high_percentile_forward_owd: __field13,
                                avg_backward_owd: __field14,
                                min_backward_owd: __field15,
                                max_backward_owd: __field16,
                                std_dev_backward_owd: __field17,
                                median_backward_owd: __field18,
                                low_percentile_backward_owd: __field19,
                                high_percentile_backward_owd: __field20,
                                avg_process_time: __field21,
                                min_process_time: __field22,
                                max_process_time: __field23,
                                std_dev_process_time: __field24,
                                median_process_time: __field25,
                                low_percentile_process_time: __field26,
                                high_percentile_process_time: __field27,
                                forward_loss: __field28,
                                backward_loss: __field29,
                                total_loss: __field30,
                                total_packets: __field31,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field12: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field13: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field14: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field15: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field16: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field17: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field18: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field19: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field20: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field21: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field22: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field23: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field24: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field25: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field26: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field27: _serde::__private::Option<f64> = _serde::__private::None;
                            let mut __field28: _serde::__private::Option<u32> = _serde::__private::None;
                            let mut __field29: _serde::__private::Option<u32> = _serde::__private::None;
                            let mut __field30: _serde::__private::Option<u32> = _serde::__private::None;
                            let mut __field31: _serde::__private::Option<usize> = _serde::__private::None;
                            while let _serde::__private::Some(__key)
                                = match _serde::de::MapAccess::next_key::<
                                    __Field,
                                >(&mut __map) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "avg_rtt",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "min_rtt",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "max_rtt",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "std_dev_rtt",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "median_rtt",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "low_percentile_rtt",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "high_percentile_rtt",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "avg_forward_owd",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "min_forward_owd",
                                                ),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "max_forward_owd",
                                                ),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "std_dev_forward_owd",
                                                ),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "median_forward_owd",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field12 => {
                                        if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "low_percentile_forward_owd",
                                                ),
                                            );
                                        }
                                        __field12 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field13 => {
                                        if _serde::__private::Option::is_some(&__field13) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "high_percentile_forward_owd",
                                                ),
                                            );
                                        }
                                        __field13 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field14 => {
                                        if _serde::__private::Option::is_some(&__field14) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "avg_backward_owd",
                                                ),
                                            );
                                        }
                                        __field14 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field15 => {
                                        if _serde::__private::Option::is_some(&__field15) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "min_backward_owd",
                                                ),
                                            );
                                        }
                                        __field15 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field16 => {
                                        if _serde::__private::Option::is_some(&__field16) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "max_backward_owd",
                                                ),
                                            );
                                        }
                                        __field16 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field17 => {
                                        if _serde::__private::Option::is_some(&__field17) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "std_dev_backward_owd",
                                                ),
                                            );
                                        }
                                        __field17 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field18 => {
                                        if _serde::__private::Option::is_some(&__field18) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "median_backward_owd",
                                                ),
                                            );
                                        }
                                        __field18 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field19 => {
                                        if _serde::__private::Option::is_some(&__field19) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "low_percentile_backward_owd",
                                                ),
                                            );
                                        }
                                        __field19 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field20 => {
                                        if _serde::__private::Option::is_some(&__field20) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "high_percentile_backward_owd",
                                                ),
                                            );
                                        }
                                        __field20 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field21 => {
                                        if _serde::__private::Option::is_some(&__field21) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "avg_process_time",
                                                ),
                                            );
                                        }
                                        __field21 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field22 => {
                                        if _serde::__private::Option::is_some(&__field22) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "min_process_time",
                                                ),
                                            );
                                        }
                                        __field22 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field23 => {
                                        if _serde::__private::Option::is_some(&__field23) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "max_process_time",
                                                ),
                                            );
                                        }
                                        __field23 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field24 => {
                                        if _serde::__private::Option::is_some(&__field24) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "std_dev_process_time",
                                                ),
                                            );
                                        }
                                        __field24 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field25 => {
                                        if _serde::__private::Option::is_some(&__field25) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "median_process_time",
                                                ),
                                            );
                                        }
                                        __field25 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field26 => {
                                        if _serde::__private::Option::is_some(&__field26) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "low_percentile_process_time",
                                                ),
                                            );
                                        }
                                        __field26 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field27 => {
                                        if _serde::__private::Option::is_some(&__field27) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "high_percentile_process_time",
                                                ),
                                            );
                                        }
                                        __field27 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<f64>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field28 => {
                                        if _serde::__private::Option::is_some(&__field28) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "forward_loss",
                                                ),
                                            );
                                        }
                                        __field28 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<u32>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field29 => {
                                        if _serde::__private::Option::is_some(&__field29) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "backward_loss",
                                                ),
                                            );
                                        }
                                        __field29 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<u32>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field30 => {
                                        if _serde::__private::Option::is_some(&__field30) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_loss",
                                                ),
                                            );
                                        }
                                        __field30 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<u32>(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field31 => {
                                        if _serde::__private::Option::is_some(&__field31) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_packets",
                                                ),
                                            );
                                        }
                                        __field31 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                usize,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    _ => {
                                        let _ = match _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        };
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("avg_rtt") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("min_rtt") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("max_rtt") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("std_dev_rtt") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("median_rtt") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "low_percentile_rtt",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "high_percentile_rtt",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "avg_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "min_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "max_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "std_dev_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "median_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field12 = match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "low_percentile_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field13 = match __field13 {
                                _serde::__private::Some(__field13) => __field13,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "high_percentile_forward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field14 = match __field14 {
                                _serde::__private::Some(__field14) => __field14,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "avg_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field15 = match __field15 {
                                _serde::__private::Some(__field15) => __field15,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "min_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field16 = match __field16 {
                                _serde::__private::Some(__field16) => __field16,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "max_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field17 = match __field17 {
                                _serde::__private::Some(__field17) => __field17,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "std_dev_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field18 = match __field18 {
                                _serde::__private::Some(__field18) => __field18,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "median_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field19 = match __field19 {
                                _serde::__private::Some(__field19) => __field19,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "low_percentile_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field20 = match __field20 {
                                _serde::__private::Some(__field20) => __field20,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "high_percentile_backward_owd",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field21 = match __field21 {
                                _serde::__private::Some(__field21) => __field21,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "avg_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field22 = match __field22 {
                                _serde::__private::Some(__field22) => __field22,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "min_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field23 = match __field23 {
                                _serde::__private::Some(__field23) => __field23,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "max_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field24 = match __field24 {
                                _serde::__private::Some(__field24) => __field24,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "std_dev_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field25 = match __field25 {
                                _serde::__private::Some(__field25) => __field25,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "median_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field26 = match __field26 {
                                _serde::__private::Some(__field26) => __field26,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "low_percentile_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field27 = match __field27 {
                                _serde::__private::Some(__field27) => __field27,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "high_percentile_process_time",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field28 = match __field28 {
                                _serde::__private::Some(__field28) => __field28,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("forward_loss") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field29 = match __field29 {
                                _serde::__private::Some(__field29) => __field29,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "backward_loss",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field30 = match __field30 {
                                _serde::__private::Some(__field30) => __field30,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("total_loss") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field31 = match __field31 {
                                _serde::__private::Some(__field31) => __field31,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "total_packets",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            _serde::__private::Ok(NetworkStatistics {
                                avg_rtt: __field0,
                                min_rtt: __field1,
                                max_rtt: __field2,
                                std_dev_rtt: __field3,
                                median_rtt: __field4,
                                low_percentile_rtt: __field5,
                                high_percentile_rtt: __field6,
                                avg_forward_owd: __field7,
                                min_forward_owd: __field8,
                                max_forward_owd: __field9,
                                std_dev_forward_owd: __field10,
                                median_forward_owd: __field11,
                                low_percentile_forward_owd: __field12,
                                high_percentile_forward_owd: __field13,
                                avg_backward_owd: __field14,
                                min_backward_owd: __field15,
                                max_backward_owd: __field16,
                                std_dev_backward_owd: __field17,
                                median_backward_owd: __field18,
                                low_percentile_backward_owd: __field19,
                                high_percentile_backward_owd: __field20,
                                avg_process_time: __field21,
                                min_process_time: __field22,
                                max_process_time: __field23,
                                std_dev_process_time: __field24,
                                median_process_time: __field25,
                                low_percentile_process_time: __field26,
                                high_percentile_process_time: __field27,
                                forward_loss: __field28,
                                backward_loss: __field29,
                                total_loss: __field30,
                                total_packets: __field31,
                            })
                        }
                    }
                    const FIELDS: &'static [&'static str] = &[
                        "avg_rtt",
                        "min_rtt",
                        "max_rtt",
                        "std_dev_rtt",
                        "median_rtt",
                        "low_percentile_rtt",
                        "high_percentile_rtt",
                        "avg_forward_owd",
                        "min_forward_owd",
                        "max_forward_owd",
                        "std_dev_forward_owd",
                        "median_forward_owd",
                        "low_percentile_forward_owd",
                        "high_percentile_forward_owd",
                        "avg_backward_owd",
                        "min_backward_owd",
                        "max_backward_owd",
                        "std_dev_backward_owd",
                        "median_backward_owd",
                        "low_percentile_backward_owd",
                        "high_percentile_backward_owd",
                        "avg_process_time",
                        "min_process_time",
                        "max_process_time",
                        "std_dev_process_time",
                        "median_process_time",
                        "low_percentile_process_time",
                        "high_percentile_process_time",
                        "forward_loss",
                        "backward_loss",
                        "total_loss",
                        "total_packets",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "NetworkStatistics",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<NetworkStatistics>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[automatically_derived]
        impl ::core::clone::Clone for NetworkStatistics {
            #[inline]
            fn clone(&self) -> NetworkStatistics {
                NetworkStatistics {
                    avg_rtt: ::core::clone::Clone::clone(&self.avg_rtt),
                    min_rtt: ::core::clone::Clone::clone(&self.min_rtt),
                    max_rtt: ::core::clone::Clone::clone(&self.max_rtt),
                    std_dev_rtt: ::core::clone::Clone::clone(&self.std_dev_rtt),
                    median_rtt: ::core::clone::Clone::clone(&self.median_rtt),
                    low_percentile_rtt: ::core::clone::Clone::clone(
                        &self.low_percentile_rtt,
                    ),
                    high_percentile_rtt: ::core::clone::Clone::clone(
                        &self.high_percentile_rtt,
                    ),
                    avg_forward_owd: ::core::clone::Clone::clone(&self.avg_forward_owd),
                    min_forward_owd: ::core::clone::Clone::clone(&self.min_forward_owd),
                    max_forward_owd: ::core::clone::Clone::clone(&self.max_forward_owd),
                    std_dev_forward_owd: ::core::clone::Clone::clone(
                        &self.std_dev_forward_owd,
                    ),
                    median_forward_owd: ::core::clone::Clone::clone(
                        &self.median_forward_owd,
                    ),
                    low_percentile_forward_owd: ::core::clone::Clone::clone(
                        &self.low_percentile_forward_owd,
                    ),
                    high_percentile_forward_owd: ::core::clone::Clone::clone(
                        &self.high_percentile_forward_owd,
                    ),
                    avg_backward_owd: ::core::clone::Clone::clone(
                        &self.avg_backward_owd,
                    ),
                    min_backward_owd: ::core::clone::Clone::clone(
                        &self.min_backward_owd,
                    ),
                    max_backward_owd: ::core::clone::Clone::clone(
                        &self.max_backward_owd,
                    ),
                    std_dev_backward_owd: ::core::clone::Clone::clone(
                        &self.std_dev_backward_owd,
                    ),
                    median_backward_owd: ::core::clone::Clone::clone(
                        &self.median_backward_owd,
                    ),
                    low_percentile_backward_owd: ::core::clone::Clone::clone(
                        &self.low_percentile_backward_owd,
                    ),
                    high_percentile_backward_owd: ::core::clone::Clone::clone(
                        &self.high_percentile_backward_owd,
                    ),
                    avg_process_time: ::core::clone::Clone::clone(
                        &self.avg_process_time,
                    ),
                    min_process_time: ::core::clone::Clone::clone(
                        &self.min_process_time,
                    ),
                    max_process_time: ::core::clone::Clone::clone(
                        &self.max_process_time,
                    ),
                    std_dev_process_time: ::core::clone::Clone::clone(
                        &self.std_dev_process_time,
                    ),
                    median_process_time: ::core::clone::Clone::clone(
                        &self.median_process_time,
                    ),
                    low_percentile_process_time: ::core::clone::Clone::clone(
                        &self.low_percentile_process_time,
                    ),
                    high_percentile_process_time: ::core::clone::Clone::clone(
                        &self.high_percentile_process_time,
                    ),
                    forward_loss: ::core::clone::Clone::clone(&self.forward_loss),
                    backward_loss: ::core::clone::Clone::clone(&self.backward_loss),
                    total_loss: ::core::clone::Clone::clone(&self.total_loss),
                    total_packets: ::core::clone::Clone::clone(&self.total_packets),
                }
            }
        }
        pub struct SessionResult {
            pub address: SocketAddr,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub network_statistics: Option<NetworkStatistics>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for SessionResult {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "SessionResult",
                    "address",
                    &self.address,
                    "status",
                    &self.status,
                    "network_statistics",
                    &&self.network_statistics,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for SessionResult {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = match _serde::Serializer::serialize_struct(
                        __serializer,
                        "SessionResult",
                        false as usize + 1
                            + if Option::is_none(&self.status) { 0 } else { 1 }
                            + if Option::is_none(&self.network_statistics) {
                                0
                            } else {
                                1
                            },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "address",
                        &self.address,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    if !Option::is_none(&self.status) {
                        match _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "status",
                            &self.status,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                    } else {
                        match _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "status",
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                    }
                    if !Option::is_none(&self.network_statistics) {
                        match _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "network_statistics",
                            &self.network_statistics,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                    } else {
                        match _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "network_statistics",
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for SessionResult {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "address" => _serde::__private::Ok(__Field::__field0),
                                "status" => _serde::__private::Ok(__Field::__field1),
                                "network_statistics" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"address" => _serde::__private::Ok(__Field::__field0),
                                b"status" => _serde::__private::Ok(__Field::__field1),
                                b"network_statistics" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<SessionResult>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = SessionResult;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct SessionResult",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match match _serde::de::SeqAccess::next_element::<
                                SocketAddr,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct SessionResult with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct SessionResult with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match match _serde::de::SeqAccess::next_element::<
                                Option<NetworkStatistics>,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct SessionResult with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(SessionResult {
                                address: __field0,
                                status: __field1,
                                network_statistics: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<SocketAddr> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<NetworkStatistics>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key)
                                = match _serde::de::MapAccess::next_key::<
                                    __Field,
                                >(&mut __map) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "address",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                SocketAddr,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("status"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "network_statistics",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                Option<NetworkStatistics>,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    _ => {
                                        let _ = match _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        };
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("address") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("status") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "network_statistics",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            _serde::__private::Ok(SessionResult {
                                address: __field0,
                                status: __field1,
                                network_statistics: __field2,
                            })
                        }
                    }
                    const FIELDS: &'static [&'static str] = &[
                        "address",
                        "status",
                        "network_statistics",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "SessionResult",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<SessionResult>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[automatically_derived]
        impl ::core::clone::Clone for SessionResult {
            #[inline]
            fn clone(&self) -> SessionResult {
                SessionResult {
                    address: ::core::clone::Clone::clone(&self.address),
                    status: ::core::clone::Clone::clone(&self.status),
                    network_statistics: ::core::clone::Clone::clone(
                        &self.network_statistics,
                    ),
                }
            }
        }
        fn round_f64_with_precision<S>(
            num: &f64,
            serializer: S,
        ) -> Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            let precision = NETWORK_PRECISION;
            let factor = 10f64.powi(precision);
            let rounded = (num * factor).round() / factor;
            serializer.serialize_f64(rounded)
        }
        pub struct TwampResult {
            pub session_results: Vec<SessionResult>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub error: Option<String>,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for TwampResult {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "TwampResult",
                    "session_results",
                    &self.session_results,
                    "error",
                    &&self.error,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for TwampResult {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = match _serde::Serializer::serialize_struct(
                        __serializer,
                        "TwampResult",
                        false as usize + 1
                            + if Option::is_none(&self.error) { 0 } else { 1 },
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    match _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "session_results",
                        &self.session_results,
                    ) {
                        _serde::__private::Ok(__val) => __val,
                        _serde::__private::Err(__err) => {
                            return _serde::__private::Err(__err);
                        }
                    };
                    if !Option::is_none(&self.error) {
                        match _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "error",
                            &self.error,
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                    } else {
                        match _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "error",
                        ) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        };
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for TwampResult {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "session_results" => {
                                    _serde::__private::Ok(__Field::__field0)
                                }
                                "error" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"session_results" => {
                                    _serde::__private::Ok(__Field::__field0)
                                }
                                b"error" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<TwampResult>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = TwampResult;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct TwampResult",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match match _serde::de::SeqAccess::next_element::<
                                Vec<SessionResult>,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct TwampResult with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct TwampResult with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(TwampResult {
                                session_results: __field0,
                                error: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Vec<SessionResult>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key)
                                = match _serde::de::MapAccess::next_key::<
                                    __Field,
                                >(&mut __map) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                } {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "session_results",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                Vec<SessionResult>,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("error"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            match _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__val) => __val,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            },
                                        );
                                    }
                                    _ => {
                                        let _ = match _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        };
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field(
                                        "session_results",
                                    ) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    match _serde::__private::de::missing_field("error") {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    }
                                }
                            };
                            _serde::__private::Ok(TwampResult {
                                session_results: __field0,
                                error: __field1,
                            })
                        }
                    }
                    const FIELDS: &'static [&'static str] = &[
                        "session_results",
                        "error",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "TwampResult",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<TwampResult>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[automatically_derived]
        impl ::core::clone::Clone for TwampResult {
            #[inline]
            fn clone(&self) -> TwampResult {
                TwampResult {
                    session_results: ::core::clone::Clone::clone(&self.session_results),
                    error: ::core::clone::Clone::clone(&self.error),
                }
            }
        }
        impl TestResult for TwampResult {}
    }
    pub mod twamp_light {
        #[cfg(target_os = "linux")]
        use common::epoll_loop::LinuxEventLoop as EventLoop;
        use common::{
            error::CommonError, event_loop::{EventLoopTrait, Itimerspec, Token},
            host::Host, session::Session,
            socket::{set_timestamping_options, CustomUdpSocket, Socket},
            statistics::OrderStatisticsTree, time::{DateTime, NtpTimestamp},
            Strategy,
        };
        use message_macro::BeBytes;
        use core::time::Duration;
        use std::{os::fd::IntoRawFd, rc::Rc, sync::atomic::Ordering};
        use crate::common::{
            ErrorEstimate, ReflectedMessage, SenderMessage, MIN_UNAUTH_PADDING,
        };
        use super::result::{NetworkStatistics, SessionResult, TwampResult};
        pub struct TwampLight {
            /// List of host on which runs a reflecctors to perform the test
            hosts: Vec<Host>,
            /// IP address of the interface on which to bind
            source_ip_address: String,
            /// Duration of the test
            duration: Duration,
            /// Interval at which the packets are sent
            packet_interval: Duration,
            /// Padding to add to the packet
            padding: usize,
        }
        impl TwampLight {
            pub fn new(
                source_ip_address: &str,
                duration: Duration,
                hosts: &[Host],
                packet_interval: Duration,
                padding: usize,
            ) -> Self {
                Self {
                    hosts: hosts.to_owned(),
                    source_ip_address: source_ip_address.to_owned(),
                    duration,
                    packet_interval,
                    padding,
                }
            }
            fn create_socket(&mut self) -> Result<CustomUdpSocket, crate::CommonError> {
                let socket = mio::net::UdpSocket::bind(
                        self.source_ip_address.parse().unwrap(),
                    )
                    .unwrap();
                let mut my_socket = CustomUdpSocket::new(socket.into_raw_fd());
                #[cfg(target_os = "linux")]
                my_socket
                    .set_socket_options(libc::SOCK_NONBLOCK | libc::SOCK_CLOEXEC, None)?;
                set_timestamping_options(&mut my_socket)?;
                Ok(my_socket)
            }
        }
        impl Strategy<TwampResult, crate::CommonError> for TwampLight {
            fn execute(&mut self) -> Result<TwampResult, crate::CommonError> {
                let sessions = self
                    .hosts
                    .iter()
                    .map(Session::new)
                    .collect::<Vec<Session>>();
                let rc_sessions = Rc::new(sessions);
                let my_socket = self.create_socket()?;
                let mut event_loop = EventLoop::new(1024);
                let rx_token = create_rx_callback(
                    &mut event_loop,
                    my_socket,
                    rc_sessions.clone(),
                )?;
                let timer_spec = Itimerspec {
                    it_interval: self.packet_interval,
                    it_value: Duration::from_micros(1),
                };
                create_tx_callback(
                    &mut event_loop,
                    timer_spec,
                    rx_token,
                    rc_sessions.clone(),
                    self.padding,
                )?;
                let duration_spec = Itimerspec {
                    it_interval: Duration::from_micros(1),
                    it_value: self.duration,
                };
                let _termination_token = event_loop.add_duration(&duration_spec)?;
                event_loop.run()?;
                let session_results = calculate_session_results(rc_sessions);
                let test_result = TwampResult {
                    session_results,
                    error: None,
                };
                Ok(test_result)
            }
        }
        fn calculate_session_results(
            rc_sessions: Rc<Vec<Session>>,
        ) -> Vec<SessionResult> {
            let session_results = rc_sessions
                .iter()
                .map(|session| {
                    let packets = session.results.read().unwrap().clone();
                    let total_packets = packets.len();
                    let (forward_loss, backward_loss, total_loss) = session
                        .analyze_packet_loss()
                        .unwrap_or_default();
                    let mut rtt_tree = OrderStatisticsTree::new();
                    let mut f_owd_tree = OrderStatisticsTree::new();
                    let mut b_owd_tree = OrderStatisticsTree::new();
                    let mut rpd_tree = OrderStatisticsTree::new();
                    rtt_tree
                        .insert_all(
                            packets
                                .iter()
                                .flat_map(|packet| {
                                    packet
                                        .calculate_rtt()
                                        .and_then(|rtt| Some(rtt.as_nanos() as u32))
                                }),
                        );
                    f_owd_tree
                        .insert_all(
                            packets
                                .iter()
                                .flat_map(|packet| {
                                    packet
                                        .calculate_owd_forward()
                                        .and_then(|owd| Some(owd.as_nanos() as u32))
                                }),
                        );
                    b_owd_tree
                        .insert_all(
                            packets
                                .iter()
                                .flat_map(|packet| {
                                    packet
                                        .calculate_owd_backward()
                                        .and_then(|owd| Some(owd.as_nanos() as u32))
                                }),
                        );
                    rpd_tree
                        .insert_all(
                            packets
                                .iter()
                                .flat_map(|packet| {
                                    packet
                                        .calculate_rpd()
                                        .and_then(|rpd| Some(rpd.as_nanos() as u32))
                                }),
                        );
                    let network_results = NetworkStatistics {
                        avg_rtt: rtt_tree.mean(),
                        min_rtt: rtt_tree.min().unwrap_or_default(),
                        max_rtt: rtt_tree.max().unwrap_or_default(),
                        std_dev_rtt: rtt_tree.std_dev(),
                        median_rtt: rtt_tree.median().unwrap_or_default(),
                        low_percentile_rtt: rtt_tree
                            .percentile(0.25)
                            .unwrap_or_default(),
                        high_percentile_rtt: rtt_tree
                            .percentile(0.75)
                            .unwrap_or_default(),
                        avg_forward_owd: f_owd_tree.mean(),
                        min_forward_owd: f_owd_tree.min().unwrap_or_default(),
                        max_forward_owd: f_owd_tree.max().unwrap_or_default(),
                        std_dev_forward_owd: f_owd_tree.std_dev(),
                        median_forward_owd: f_owd_tree.median().unwrap_or_default(),
                        low_percentile_forward_owd: f_owd_tree
                            .percentile(0.25)
                            .unwrap_or_default(),
                        high_percentile_forward_owd: f_owd_tree
                            .percentile(0.75)
                            .unwrap_or_default(),
                        avg_backward_owd: b_owd_tree.mean(),
                        min_backward_owd: b_owd_tree.min().unwrap_or_default(),
                        max_backward_owd: b_owd_tree.max().unwrap_or_default(),
                        std_dev_backward_owd: b_owd_tree.std_dev(),
                        median_backward_owd: b_owd_tree.median().unwrap_or_default(),
                        low_percentile_backward_owd: b_owd_tree
                            .percentile(0.25)
                            .unwrap_or_default(),
                        high_percentile_backward_owd: b_owd_tree
                            .percentile(0.75)
                            .unwrap_or_default(),
                        avg_process_time: rpd_tree.mean(),
                        min_process_time: rpd_tree.min().unwrap_or_default(),
                        max_process_time: rpd_tree.max().unwrap_or_default(),
                        std_dev_process_time: rpd_tree.std_dev(),
                        median_process_time: rpd_tree.median().unwrap_or_default(),
                        low_percentile_process_time: rpd_tree
                            .percentile(0.25)
                            .unwrap_or_default(),
                        high_percentile_process_time: rpd_tree
                            .percentile(0.75)
                            .unwrap_or_default(),
                        forward_loss,
                        backward_loss,
                        total_loss,
                        total_packets,
                    };
                    SessionResult {
                        address: session.socket_address,
                        status: Some("Success".to_string()),
                        network_statistics: Some(network_results),
                    }
                })
                .collect::<Vec<SessionResult>>();
            session_results
        }
        fn create_tx_callback(
            event_loop: &mut EventLoop<CustomUdpSocket>,
            timer_spec: Itimerspec,
            rx_token: Token,
            tx_sessions: Rc<Vec<Session>>,
            padding: usize,
        ) -> Result<usize, CommonError> {
            let _tx_token = event_loop
                .add_timer(
                    &timer_spec,
                    &rx_token,
                    move |inner_socket| {
                        let mut received_bytes = ::alloc::vec::Vec::new();
                        let mut timestamps = ::alloc::vec::Vec::new();
                        let timestamp = NtpTimestamp::try_from(DateTime::utc_now())?;
                        tx_sessions
                            .iter()
                            .for_each(|session| {
                                let twamp_test_message = SenderMessage::new(
                                        session.seq_number.load(Ordering::SeqCst),
                                        timestamp,
                                        ErrorEstimate::new(1, 0, 1, 1).unwrap(),
                                        ::alloc::vec::from_elem(0u8, MIN_UNAUTH_PADDING + padding),
                                    )
                                    .map_err(|e| CommonError::from(e.to_string()));
                                {
                                    let lvl = ::log::Level::Info;
                                    if lvl <= ::log::STATIC_MAX_LEVEL
                                        && lvl <= ::log::max_level()
                                    {
                                        ::log::__private_api_log(
                                            format_args!(
                                                "Twamp Sender Message {0:?}", twamp_test_message
                                            ),
                                            lvl,
                                            &(
                                                "twamp::twamp_light_sender::twamp_light",
                                                "twamp::twamp_light_sender::twamp_light",
                                                "twamp/src/twamp_light_sender/twamp_light.rs",
                                                227u32,
                                            ),
                                            ::log::__private_api::Option::None,
                                        );
                                    }
                                };
                                let (sent, timestamp) = inner_socket
                                    .send_to(
                                        &session.socket_address,
                                        twamp_test_message.unwrap(),
                                    )
                                    .unwrap();
                                received_bytes.push(sent);
                                timestamps.push(timestamp);
                            });
                        tx_sessions
                            .iter()
                            .zip(timestamps.iter())
                            .for_each(|(session, timestamp)| {
                                let twamp_test_message = SenderMessage {
                                    sequence_number: session.seq_number.load(Ordering::SeqCst),
                                    timestamp: NtpTimestamp::from(timestamp.clone()),
                                    error_estimate: ErrorEstimate::new(1, 1, 1, 1).unwrap(),
                                    padding: ::alloc::vec::from_elem(0u8, 0),
                                };
                                session.add_to_sent(Box::new(twamp_test_message))
                            });
                        Ok(0)
                    },
                )?;
            Ok(5)
        }
        fn create_rx_callback(
            event_loop: &mut EventLoop<CustomUdpSocket>,
            my_socket: CustomUdpSocket,
            rx_sessions: Rc<Vec<Session>>,
        ) -> Result<Token, CommonError> {
            let rx_token = event_loop
                .register_event_source(
                    my_socket,
                    move |inner_socket| {
                        let buffer = &mut [0; 1024];
                        let (result, socket_address, timestamp) = inner_socket
                            .receive_from(buffer)?;
                        {
                            let lvl = ::log::Level::Info;
                            if lvl <= ::log::STATIC_MAX_LEVEL
                                && lvl <= ::log::max_level()
                            {
                                ::log::__private_api_log(
                                    format_args!(
                                        "Received {0} bytes from {1}", result, socket_address
                                    ),
                                    lvl,
                                    &(
                                        "twamp::twamp_light_sender::twamp_light",
                                        "twamp::twamp_light_sender::twamp_light",
                                        "twamp/src/twamp_light_sender/twamp_light.rs",
                                        260u32,
                                    ),
                                    ::log::__private_api::Option::None,
                                );
                            }
                        };
                        let twamp_test_message: &Result<
                            (ReflectedMessage, usize),
                            CommonError,
                        > = &ReflectedMessage::try_from_be_bytes(&buffer[..result])
                            .map_err(|e| e.into());
                        {
                            let lvl = ::log::Level::Debug;
                            if lvl <= ::log::STATIC_MAX_LEVEL
                                && lvl <= ::log::max_level()
                            {
                                ::log::__private_api_log(
                                    format_args!(
                                        "Twamp Response Message {0:?}", twamp_test_message
                                    ),
                                    lvl,
                                    &(
                                        "twamp::twamp_light_sender::twamp_light",
                                        "twamp::twamp_light_sender::twamp_light",
                                        "twamp/src/twamp_light_sender/twamp_light.rs",
                                        263u32,
                                    ),
                                    ::log::__private_api::Option::None,
                                );
                            }
                        };
                        if let Ok(twamp_message) = twamp_test_message {
                            let session_option = rx_sessions
                                .iter()
                                .find(|session| session.socket_address == socket_address);
                            if let Some(session) = session_option {
                                session
                                    .add_to_received(twamp_message.0.to_owned(), timestamp)?;
                                let latest_result = session.get_latest_result();
                                let json_result = serde_json::to_string_pretty(
                                        &latest_result,
                                    )
                                    .unwrap();
                                {
                                    let lvl = ::log::Level::Debug;
                                    if lvl <= ::log::STATIC_MAX_LEVEL
                                        && lvl <= ::log::max_level()
                                    {
                                        ::log::__private_api_log(
                                            format_args!("Latest {0}", json_result),
                                            lvl,
                                            &(
                                                "twamp::twamp_light_sender::twamp_light",
                                                "twamp::twamp_light_sender::twamp_light",
                                                "twamp/src/twamp_light_sender/twamp_light.rs",
                                                273u32,
                                            ),
                                            ::log::__private_api::Option::None,
                                        );
                                    }
                                };
                            }
                        }
                        Ok(result as i32)
                    },
                )?;
            Ok(rx_token)
        }
    }
    pub struct Configuration {
        pub hosts: Vec<Host>,
        pub mode: String,
        pub source_ip_address: String,
        #[validate(range(min = 1, max = 3600))]
        pub collection_period: i64,
        #[validate(range(min = 1, max = 1000))]
        pub packet_interval: i64,
    }
    impl ::validator::Validate for Configuration {
        fn validate(&self) -> ::std::result::Result<(), ::validator::ValidationErrors> {
            use ::validator::ValidateArgs;
            self.validate_args(())
        }
    }
    #[allow(clippy::all)]
    #[allow(single_use_lifetimes)]
    impl<'v_a> ::validator::ValidateArgs<'v_a> for Configuration {
        type Args = ();
        #[allow(unused_mut)]
        #[allow(unused_variable)]
        fn validate_args(
            &self,
            args: Self::Args,
        ) -> ::std::result::Result<(), ::validator::ValidationErrors> {
            let mut errors = ::validator::ValidationErrors::new();
            if !::validator::validate_range(
                self.collection_period as f64,
                ::std::option::Option::Some(1f64 as f64),
                ::std::option::Option::Some(3600f64 as f64),
            ) {
                let mut err = ::validator::ValidationError::new("range");
                err.add_param(::std::borrow::Cow::from("min"), &1f64);
                err.add_param(::std::borrow::Cow::from("max"), &3600f64);
                err.add_param(
                    ::std::borrow::Cow::from("value"),
                    &self.collection_period,
                );
                errors.add("collection_period", err);
            }
            if !::validator::validate_range(
                self.packet_interval as f64,
                ::std::option::Option::Some(1f64 as f64),
                ::std::option::Option::Some(1000f64 as f64),
            ) {
                let mut err = ::validator::ValidationError::new("range");
                err.add_param(::std::borrow::Cow::from("min"), &1f64);
                err.add_param(::std::borrow::Cow::from("max"), &1000f64);
                err.add_param(::std::borrow::Cow::from("value"), &self.packet_interval);
                errors.add("packet_interval", err);
            }
            let mut result = if errors.is_empty() {
                ::std::result::Result::Ok(())
            } else {
                ::std::result::Result::Err(errors)
            };
            result
        }
    }
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl _serde::Serialize for Configuration {
            fn serialize<__S>(
                &self,
                __serializer: __S,
            ) -> _serde::__private::Result<__S::Ok, __S::Error>
            where
                __S: _serde::Serializer,
            {
                let mut __serde_state = match _serde::Serializer::serialize_struct(
                    __serializer,
                    "Configuration",
                    false as usize + 1 + 1 + 1 + 1 + 1,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "hosts",
                    &self.hosts,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "mode",
                    &self.mode,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "source_ip_address",
                    &self.source_ip_address,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "collection_period",
                    &self.collection_period,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                match _serde::ser::SerializeStruct::serialize_field(
                    &mut __serde_state,
                    "packet_interval",
                    &self.packet_interval,
                ) {
                    _serde::__private::Ok(__val) => __val,
                    _serde::__private::Err(__err) => {
                        return _serde::__private::Err(__err);
                    }
                };
                _serde::ser::SerializeStruct::end(__serde_state)
            }
        }
    };
    #[doc(hidden)]
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        #[allow(unused_extern_crates, clippy::useless_attribute)]
        extern crate serde as _serde;
        #[automatically_derived]
        impl<'de> _serde::Deserialize<'de> for Configuration {
            fn deserialize<__D>(
                __deserializer: __D,
            ) -> _serde::__private::Result<Self, __D::Error>
            where
                __D: _serde::Deserializer<'de>,
            {
                #[allow(non_camel_case_types)]
                enum __Field {
                    __field0,
                    __field1,
                    __field2,
                    __field3,
                    __field4,
                    __ignore,
                }
                struct __FieldVisitor;
                impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                    type Value = __Field;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "field identifier",
                        )
                    }
                    fn visit_u64<__E>(
                        self,
                        __value: u64,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            0u64 => _serde::__private::Ok(__Field::__field0),
                            1u64 => _serde::__private::Ok(__Field::__field1),
                            2u64 => _serde::__private::Ok(__Field::__field2),
                            3u64 => _serde::__private::Ok(__Field::__field3),
                            4u64 => _serde::__private::Ok(__Field::__field4),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_str<__E>(
                        self,
                        __value: &str,
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            "hosts" => _serde::__private::Ok(__Field::__field0),
                            "mode" => _serde::__private::Ok(__Field::__field1),
                            "source_ip_address" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            "collection_period" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            "packet_interval" => _serde::__private::Ok(__Field::__field4),
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                    fn visit_bytes<__E>(
                        self,
                        __value: &[u8],
                    ) -> _serde::__private::Result<Self::Value, __E>
                    where
                        __E: _serde::de::Error,
                    {
                        match __value {
                            b"hosts" => _serde::__private::Ok(__Field::__field0),
                            b"mode" => _serde::__private::Ok(__Field::__field1),
                            b"source_ip_address" => {
                                _serde::__private::Ok(__Field::__field2)
                            }
                            b"collection_period" => {
                                _serde::__private::Ok(__Field::__field3)
                            }
                            b"packet_interval" => {
                                _serde::__private::Ok(__Field::__field4)
                            }
                            _ => _serde::__private::Ok(__Field::__ignore),
                        }
                    }
                }
                impl<'de> _serde::Deserialize<'de> for __Field {
                    #[inline]
                    fn deserialize<__D>(
                        __deserializer: __D,
                    ) -> _serde::__private::Result<Self, __D::Error>
                    where
                        __D: _serde::Deserializer<'de>,
                    {
                        _serde::Deserializer::deserialize_identifier(
                            __deserializer,
                            __FieldVisitor,
                        )
                    }
                }
                struct __Visitor<'de> {
                    marker: _serde::__private::PhantomData<Configuration>,
                    lifetime: _serde::__private::PhantomData<&'de ()>,
                }
                impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                    type Value = Configuration;
                    fn expecting(
                        &self,
                        __formatter: &mut _serde::__private::Formatter,
                    ) -> _serde::__private::fmt::Result {
                        _serde::__private::Formatter::write_str(
                            __formatter,
                            "struct Configuration",
                        )
                    }
                    #[inline]
                    fn visit_seq<__A>(
                        self,
                        mut __seq: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::SeqAccess<'de>,
                    {
                        let __field0 = match match _serde::de::SeqAccess::next_element::<
                            Vec<Host>,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        0usize,
                                        &"struct Configuration with 5 elements",
                                    ),
                                );
                            }
                        };
                        let __field1 = match match _serde::de::SeqAccess::next_element::<
                            String,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        1usize,
                                        &"struct Configuration with 5 elements",
                                    ),
                                );
                            }
                        };
                        let __field2 = match match _serde::de::SeqAccess::next_element::<
                            String,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        2usize,
                                        &"struct Configuration with 5 elements",
                                    ),
                                );
                            }
                        };
                        let __field3 = match match _serde::de::SeqAccess::next_element::<
                            i64,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        3usize,
                                        &"struct Configuration with 5 elements",
                                    ),
                                );
                            }
                        };
                        let __field4 = match match _serde::de::SeqAccess::next_element::<
                            i64,
                        >(&mut __seq) {
                            _serde::__private::Ok(__val) => __val,
                            _serde::__private::Err(__err) => {
                                return _serde::__private::Err(__err);
                            }
                        } {
                            _serde::__private::Some(__value) => __value,
                            _serde::__private::None => {
                                return _serde::__private::Err(
                                    _serde::de::Error::invalid_length(
                                        4usize,
                                        &"struct Configuration with 5 elements",
                                    ),
                                );
                            }
                        };
                        _serde::__private::Ok(Configuration {
                            hosts: __field0,
                            mode: __field1,
                            source_ip_address: __field2,
                            collection_period: __field3,
                            packet_interval: __field4,
                        })
                    }
                    #[inline]
                    fn visit_map<__A>(
                        self,
                        mut __map: __A,
                    ) -> _serde::__private::Result<Self::Value, __A::Error>
                    where
                        __A: _serde::de::MapAccess<'de>,
                    {
                        let mut __field0: _serde::__private::Option<Vec<Host>> = _serde::__private::None;
                        let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                        let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                        let mut __field3: _serde::__private::Option<i64> = _serde::__private::None;
                        let mut __field4: _serde::__private::Option<i64> = _serde::__private::None;
                        while let _serde::__private::Some(__key)
                            = match _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map) {
                                _serde::__private::Ok(__val) => __val,
                                _serde::__private::Err(__err) => {
                                    return _serde::__private::Err(__err);
                                }
                            } {
                            match __key {
                                __Field::__field0 => {
                                    if _serde::__private::Option::is_some(&__field0) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("hosts"),
                                        );
                                    }
                                    __field0 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            Vec<Host>,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field1 => {
                                    if _serde::__private::Option::is_some(&__field1) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field("mode"),
                                        );
                                    }
                                    __field1 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            String,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field2 => {
                                    if _serde::__private::Option::is_some(&__field2) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "source_ip_address",
                                            ),
                                        );
                                    }
                                    __field2 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<
                                            String,
                                        >(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field3 => {
                                    if _serde::__private::Option::is_some(&__field3) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "collection_period",
                                            ),
                                        );
                                    }
                                    __field3 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<i64>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                __Field::__field4 => {
                                    if _serde::__private::Option::is_some(&__field4) {
                                        return _serde::__private::Err(
                                            <__A::Error as _serde::de::Error>::duplicate_field(
                                                "packet_interval",
                                            ),
                                        );
                                    }
                                    __field4 = _serde::__private::Some(
                                        match _serde::de::MapAccess::next_value::<i64>(&mut __map) {
                                            _serde::__private::Ok(__val) => __val,
                                            _serde::__private::Err(__err) => {
                                                return _serde::__private::Err(__err);
                                            }
                                        },
                                    );
                                }
                                _ => {
                                    let _ = match _serde::de::MapAccess::next_value::<
                                        _serde::de::IgnoredAny,
                                    >(&mut __map) {
                                        _serde::__private::Ok(__val) => __val,
                                        _serde::__private::Err(__err) => {
                                            return _serde::__private::Err(__err);
                                        }
                                    };
                                }
                            }
                        }
                        let __field0 = match __field0 {
                            _serde::__private::Some(__field0) => __field0,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("hosts") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field1 = match __field1 {
                            _serde::__private::Some(__field1) => __field1,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field("mode") {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field2 = match __field2 {
                            _serde::__private::Some(__field2) => __field2,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "source_ip_address",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field3 = match __field3 {
                            _serde::__private::Some(__field3) => __field3,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "collection_period",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        let __field4 = match __field4 {
                            _serde::__private::Some(__field4) => __field4,
                            _serde::__private::None => {
                                match _serde::__private::de::missing_field(
                                    "packet_interval",
                                ) {
                                    _serde::__private::Ok(__val) => __val,
                                    _serde::__private::Err(__err) => {
                                        return _serde::__private::Err(__err);
                                    }
                                }
                            }
                        };
                        _serde::__private::Ok(Configuration {
                            hosts: __field0,
                            mode: __field1,
                            source_ip_address: __field2,
                            collection_period: __field3,
                            packet_interval: __field4,
                        })
                    }
                }
                const FIELDS: &'static [&'static str] = &[
                    "hosts",
                    "mode",
                    "source_ip_address",
                    "collection_period",
                    "packet_interval",
                ];
                _serde::Deserializer::deserialize_struct(
                    __deserializer,
                    "Configuration",
                    FIELDS,
                    __Visitor {
                        marker: _serde::__private::PhantomData::<Configuration>,
                        lifetime: _serde::__private::PhantomData,
                    },
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::fmt::Debug for Configuration {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field5_finish(
                f,
                "Configuration",
                "hosts",
                &self.hosts,
                "mode",
                &self.mode,
                "source_ip_address",
                &self.source_ip_address,
                "collection_period",
                &self.collection_period,
                "packet_interval",
                &&self.packet_interval,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Configuration {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Configuration {
        #[inline]
        fn eq(&self, other: &Configuration) -> bool {
            self.hosts == other.hosts && self.mode == other.mode
                && self.source_ip_address == other.source_ip_address
                && self.collection_period == other.collection_period
                && self.packet_interval == other.packet_interval
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Configuration {
        #[inline]
        fn clone(&self) -> Configuration {
            Configuration {
                hosts: ::core::clone::Clone::clone(&self.hosts),
                mode: ::core::clone::Clone::clone(&self.mode),
                source_ip_address: ::core::clone::Clone::clone(&self.source_ip_address),
                collection_period: ::core::clone::Clone::clone(&self.collection_period),
                packet_interval: ::core::clone::Clone::clone(&self.packet_interval),
            }
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Configuration {
        #[inline]
        fn default() -> Configuration {
            Configuration {
                hosts: ::core::default::Default::default(),
                mode: ::core::default::Default::default(),
                source_ip_address: ::core::default::Default::default(),
                collection_period: ::core::default::Default::default(),
                packet_interval: ::core::default::Default::default(),
            }
        }
    }
    const NETWORK_PRECISION: i32 = 3;
}
use std::fs::File;
use std::io::Read;
use structopt::StructOpt;
#[structopt(name = "myapp")]
struct Cli {
    #[structopt(short = "c", long = "config", default_value = "config.json")]
    config_file: String,
}
#[allow(unused_variables)]
#[allow(unknown_lints)]
#[allow(
    clippy::style,
    clippy::complexity,
    clippy::pedantic,
    clippy::restriction,
    clippy::perf,
    clippy::deprecated,
    clippy::nursery,
    clippy::cargo
)]
#[deny(clippy::correctness)]
#[allow(dead_code, unreachable_code)]
impl ::structopt::StructOpt for Cli {
    fn clap<'a, 'b>() -> ::structopt::clap::App<'a, 'b> {
        let app = ::structopt::clap::App::new("myapp");
        <Self as ::structopt::StructOptInternal>::augment_clap(app)
    }
    fn from_clap(matches: &::structopt::clap::ArgMatches) -> Self {
        Cli {
            config_file: matches
                .value_of("config-file")
                .map(|s| ::std::str::FromStr::from_str(s).unwrap())
                .unwrap(),
        }
    }
}
#[allow(unused_variables)]
#[allow(unknown_lints)]
#[allow(
    clippy::style,
    clippy::complexity,
    clippy::pedantic,
    clippy::restriction,
    clippy::perf,
    clippy::deprecated,
    clippy::nursery,
    clippy::cargo
)]
#[deny(clippy::correctness)]
#[allow(dead_code, unreachable_code)]
impl ::structopt::StructOptInternal for Cli {
    fn augment_clap<'a, 'b>(
        app: ::structopt::clap::App<'a, 'b>,
    ) -> ::structopt::clap::App<'a, 'b> {
        {
            let app = app;
            let app = app
                .arg(
                    ::structopt::clap::Arg::with_name("config-file")
                        .takes_value(true)
                        .multiple(false)
                        .required(false)
                        .validator(|s| {
                            ::std::str::FromStr::from_str(s.as_str())
                                .map(|_: String| ())
                                .map_err(|e| e.to_string())
                        })
                        .short("c")
                        .long("config")
                        .default_value("config.json"),
                );
            app.version("0.1.0")
        }
    }
    fn is_subcommand() -> bool {
        false
    }
}
struct App {
    config: TwampConfiguration,
}
#[automatically_derived]
impl ::core::fmt::Debug for App {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::debug_struct_field1_finish(
            f,
            "App",
            "config",
            &&self.config,
        )
    }
}
impl App {
    fn new(config: TwampConfiguration) -> Self {
        Self { config }
    }
    fn run(&self) -> Result<(), CommonError> {
        {
            let lvl = ::log::Level::Info;
            if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                ::log::__private_api_log(
                    format_args!("{0:?}", self.config),
                    lvl,
                    &("twamp", "twamp", "twamp/src/main.rs", 34u32),
                    ::log::__private_api::Option::None,
                );
            }
        };
        let twamp = Twamp::new(self.config.clone());
        let mut strategy = twamp.generate()?;
        let result = strategy.execute()?;
        {
            let lvl = ::log::Level::Info;
            if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                ::log::__private_api_log(
                    format_args!(
                        "Result {0:#}", serde_json::to_string_pretty(& result).unwrap()
                    ),
                    lvl,
                    &("twamp", "twamp", "twamp/src/main.rs", 39u32),
                    ::log::__private_api::Option::None,
                );
            }
        };
        Ok(())
    }
}
fn main() {
    log4rs::init_file("twamp/log_config.yml", Default::default()).unwrap();
    let args = Cli::from_args();
    let mut file = File::open(args.config_file).expect("failed to open config file");
    let mut contents = String::new();
    file.read_to_string(&mut contents).expect("failed to read config file");
    let config: TwampConfiguration = serde_json::from_str(&contents)
        .expect("failed to parse config");
    config.validate().expect("invalid configuration");
    let app = App::new(config);
    let _ = app.run();
}
